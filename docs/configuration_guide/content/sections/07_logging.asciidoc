= Logging

== Logging Configuration

Logging can be configured by editing the `logback.groovy` file which can be found in the `/tomcat/webapps/owf/WEB-INF/classes/` directory.

.Example logging configuration file -- logback.groovy
[source,groovy]
----
logback.groovy
import java.nio.charset.Charset

// Configuration variables
def LOG_PATH = "./logs"

// Status listener to display changes to the logging configuration
// statusListener(OnConsoleStatusListener)

// Enable periodically scanning the logging configuration for changes
scan("30 seconds")

// Console appender
appender("CONSOLE", ConsoleAppender) {
    encoder(PatternLayoutEncoder) {
        charset = Charset.forName("UTF-8")
        pattern = "%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%logger] %msg%n"
    }
}

// File appender
appender("FILE", RollingFileAppender) {
    append = true
    encoder(PatternLayoutEncoder) {
        charset = Charset.forName("UTF-8")
        pattern = "%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%logger] %msg%n"
    }
    rollingPolicy(TimeBasedRollingPolicy) {
        FileNamePattern = "${LOG_PATH}/ozone-framework_%d.log"
    }
}

// Default root logging level
root(ERROR, ["CONSOLE", "FILE"])

// Logging for the Ozone namespaces -- set to INFO or DEBUG for more verbose logging
logger("ozone", WARN)
logger("org.ozoneplatform", WARN)

// Logging for all AJAX requests
logger("ozone.owf.grails.controllers.RequestLogInterceptor", INFO)
----

Logback supports configuration using a Groovy Domain Specific Language (DSL) as demonstrated above, as well as traditional XML configuration file.

To use an XML file, replace the logback.groovy file in the above path with a file named `logback.xml`.

The configuration options and syntax for the Logback configuration are documented in the Logback manual, listed below.

*References:*

* Logback: Manual – https://logback.qos.ch/manual/index.html
* Logback: Groovy Configuration (DSL) – https://logback.qos.ch/manual/groovy.html
* Grails v3.3.x: Logging Guide – https://docs.grails.org/3.3.2/guide/conf.html#logging


[#audit-logging]
== Audit Logging

OWF includes an option to audit all user entry and exit in the system. The OWF Bundle ships with this feature enabled by default. The Audit Log tracks the following types of changes:

* Both successful and unsuccessful sign-in attempts
* User Sign-out Events:
** A user signing out on purpose
** A session times out

NOTE: References to CAS and OWF must match the settings of the current installation.


=== Sign-in Events

A sign-in failure will occur and be recorded in the log if a user has a valid PKI Certificate but the associated username is not registered as a valid user within OWF. A failed sign in produces the following log statement at the info level:

.Failed sign-in event (INFO)
----
INFO [02/15/2011 15:24:04 -0500] IP: 127.0.0.1 User: testAdmin1 [USER LOGIN]: LOGIN FAILURE - ACCESS DENIED with FAILURE MSG [Login for 'testAdmin1' attempted with authenticated credentials [CERTIFICATE LOGIN]; However, the Provider was not found. Access is DENIED.]
----

A failed sign in produces the following log statement at the debug level:

.Failed sign-in event (DEBUG)
----
DEBUG [02/15/2011 15:27:18 -0500] IP: 127.0.0.1 User: testAdmin1 [USER LOGIN]:LOGIN FAILURE - ACCESS DENIED with FAILURE MSG [Login for 'testAdmin1' attempted with authenticated credentials [CERTIFICATE LOGIN >> Signature Algorithm: [SHA1withRSA, OID = 1.2.840.113549.1.1.5]; Subject: [EMAILADDRESS=testAdmin1@nowhere.com, CN=testAdmin1, OU=Ozone, O=Ozone, L=Columbia, ST=Maryland, C=US]; Validity: [From: Thu Feb 04 13:58:52 EST 2010, To: Sun Feb 03 13:58:52 EST 2013]; Issuer: [EMAILADDRESS=ozone@nowhere.com, CN=localhost, OU=Ozone, O=Ozone, L=Columbia, ST=Maryland, C=US]; ]; However, the Provider was not found. Access is DENIED. Login Exception Message: [No AuthenticationProvider found for org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken]]
----

A successful PKI Certificate sign in produces the following log statement at the info level:

.Successful certificate sign-in event (INFO)
----
INFO [02/15/2011 15:39:13 -0500] IP: 127.0.0.1 User: testAdmin1 [USER LOGIN]: LOGIN SUCCESS - ACCESS GRANTED USER [testAdmin1], with DISPLAY NAME [Test Admin 1], with AUTHORITIES [ROLE_ADMIN,ROLE_USER], with ORGANIZATION [Test Admin Organization], with EMAIL [testAdmin1@nowhere.com]with CREDENTIALS [CERTIFICATE LOGIN]
----

A successful PKI Certificate sign-in statement produces the following log statement at the debug level:

.Successful certificate sign-in event (DEBUG)
----
DEBUG [02/15/2011 15:42:10 -0500] IP: 127.0.0.1 User: testAdmin1 [USER LOGIN]:LOGIN SUCCESS - ACCESS GRANTED USER [testAdmin1], with DISPLAY NAME [Test Admin 1], with AUTHORITIES [ROLE_ADMIN,ROLE_USER], with ORGANIZATION [Test Admin Organization], with EMAIL [testAdmin1@nowhere.com] with CREDENTIALS [CERTIFICATE LOGIN >> Signature Algorithm: [SHA1withRSA, OID = 1.2.840.113549.1.1.5]; Subject: [EMAILADDRESS=testAdmin1@nowhere.com, CN=testAdmin1, OU=Ozone, O=Ozone, L=Columbia, ST=Maryland, C=US]; Validity: [From: Thu Feb 04 13:58:52 EST 2010, To: Sun Feb 03 13:58:52 EST 2013]; Issuer: [EMAILADDRESS=ozone@nowhere.com, CN=localhost, OU=Ozone, O=Ozone, L=Columbia, ST=Maryland, C=US]; ]
----


=== Logout Events

Sign-out events are logged by the `ozone.securitysample.authentication.audit.SecurityAuditLogger` logger. This logger supports two levels of logging: `info` and `debug`, with the latter providing more detailed information about each sign-out event.

Below is a typical user-initiated sign-out event which has been saved as a log entry, with the log level set to info:

.Sign-out event (INFO)
----
INFO [02/03/2011 16:13:35 -0500] IP: 127.0.0.1 SessionID: 8ki2ttimdxc User: testAdmin1 [USER LOGOUT]:
----

Below is a typical user-initiated sign-out event which has been saved as a log entry, with the log level set to debug:

.Sign-out event (DEBUG)
----
DEBUG [02/03/2011 15:59:53 -0500] IP: 127.0.0.1 SessionID: 1tjefhsxz1x6t User: testUser1 [USER SESSION TIMEOUT] with ID [2], with EMAIL [testUser1@nowhere.com], with ACCOUNT CREATED DATE [02/03/2011 15:58:50 -0500], with LAST LOGIN DATE [02/03/2011 15:58:50 -0500]
----

A user can also be forced to sign-out when their session times out. Below are info and debug log statements:

.Session time-out event (INFO)
----
INFO [02/07/2011 10:08:21 -0500] IP: 127.0.0.1 SessionID: 1b4nvaqnb0qx8 User: testAdmin1 [USER SESSION TIMEOUT]
----

.Session time-out event (DEBUG)
----
DEBUG [02/07/2011 10:24:21 -0500] IP: 127.0.0.1 SessionID: d0pq3g4xguv3 User: testAdmin1 [USER SESSION TIMEOUT] with ID [1], with EMAIL [testAdmin1@nowhere.com], with ACCOUNT CREATED DATE [02/07/2011 10:23:18 -0500], with LAST LOGIN DATE [02/07/2011 10:23:18 -0500]
----


== Common Event Format (CEF) Auditing

Common Event Format (CEF) auditing capabilities are available in OWF and the Store. The variables used for OWF CEF logging are defined in the application.yml. To enable/disable them, sign into OWF and the Store as an administrator and navigate to the auditing configurations.
CEF auditing is turned ON by default, the toggle controls for both CEF and Object Access auditing are found in OWF's Application Configurations which is located on the drop-down User Menu in the user interface. For more information, see the OWF Administrator's Guide.

When enabled, CEF auditing records common user events:

* Sign in and out (Sign out - Marketplace only)
* Create, Read^1^, Edit and Delete
* Search
* Import and Export

^1.^ Object Access auditing is a separate CEF auditing feature that records users' Read events. Read events are logged when both the CEF auditing global flag and the Object Access flag are ON in OWF's Application Configurations. If the Object Access auditing is ON and the CEF auditing is OFF, no Read events are logged with CEF auditing.

CEF auditing and Audit Logging (see <<audit-logging>>) record overlapping database events (ex. edit, delete and log out events). When CEF auditing is ON, CEF auditing is the recorder of these database events; these events are not recorded with Audit Logging. When CEF is turned OFF, Audit Logging records these database events.

The following are two log examples using CEF auditing:

.CEF auditing from an object modification event
----
26 Jun 2013 12:31:37,217 EDT CEF:0|ORG|MARKETPLACE|500-27_L2::IC::1.3|FILEOBJ_MODIFY|Object was updated|7|cat=FILEOBJ_MODIFY suid=MikePAdmin shost=10.10.16.12 requestMethod=USER_INITIATED outcome=SUCCESS deviceFacility=0CCB5827C819E1A4AC9BE5BD4C6F9FE9.mp02 reason=UNKNOWN cs5=UNKNOWN act=7.2 deviceExternalId=UNKNOWN dhost=amlqa02.goss.owfgoss.org cs4=UNKNOWN start=06:26:2013 12:31:37 [.037]cs3=UNKNOWN fname=[CLASS:marketplace.OwfProperties, stackContext:, stackDescriptor:] filePermission=UNKNOWN fileId=16 fsize=2 fileType=OBJECT oldFilename=[CLASS:marketplace.OwfProperties, stackContext:null, stackDescriptor:null]oldFilePermission=UNKNOWN oldFileId=16 oldFileSizesize=2 oldFileType=OBJECT
----

.CEF auditing from a log-on event
----
26 Jun 2013 08:57:51,974 EDT CEF:0|ORG| MARKETPLACE L|500-27_L2::IC::1.3|LOGON|A logon event occured.|7|cat=LOGON suid=MikePAdmin shost=10.10.16.12 requestMethod=USER_INITIATED outcome=SUCCESS deviceFacility=8C24A08B7E9848C80F929791DA40F734.mp02 reason=UNKNOWN cs5=UNKNOWN act=7.2 deviceExternalId=UNKNOWN dhost=amlqa02.goss.owfgoss.org cs4=UNKNOWN start=06:26:2013 08:57:51 [.051]cs3=UNKNOWN
----
