include::../_variables.asciidoc[]

= Configuration

OWF offers a variety of custom configuration options in the externalized `{file-app-yml}` configuration file, located in the bundle in the `{path-ozone}/` folder. Once changes are made, restart the system to apply the changes.

The default settings provided in the `{file-app-yml}` file are intended for use in a local, non-production environment. For production deployment to a non-local environment or to use an external database, this file must be configured with the appropriate settings, which are explained the following sections.

NOTE: In previous versions of OWF, the `OwfConfig.xml` file housed many of the application's customizable values. Beginning with OWF 7.17.2, these values have been moved to the `{file-app-yml}` file described below.


== Environments settings

The `environments` section of the `{file-app-yml}` file contains environment-specific settings which override the top-level configuration sections.

This section is optional; any sub-sections here may be copied to the top-level if no alternate environment configurations are desired. However, it may be used to enable quickly switching settings such as server hosting locations or databases for multiple environments such as testing, development, staging, or production.

The provided example `{file-app-yml}` uses these environment-specific blocks for some configuration settings. In the following guide, if the referenced section can not be found as a top-level section, check the `environments` section for the corresponding sub-section.

.Example
[source,yaml]
----
environments:
    development:
        server:
            # Development `server` settings

    production:
        server:
            # Production `server` settings

        dataSource:
            # Production `dataSource` settings
----


== Grails

The `grails` section of the `{file-app-yml}` file contains configuration specific to the Grails web framework.

.Example: {file-app-yml}
[source,yaml]
----
grails:
    cache:
        ehcache:
            ehcacheXmlLocation: 'classpath:ozone/framework/ehcache.xml'
            lockTimeout: 200
    resources:
        cachePeriod: 600
    cors:
        enabled: true
----

`grails.cache.ehcache.ehcacheXmlLocation`::
_string_ -- Location of the Ehcache XML configuration file.

`grails.resources.cachePeriod`::
_number_ -- Enables caching of the static assets by setting the HTTP Cache-Control header's max-age property.

`grails.cors.enabled`::
_boolean_ -- Enables Cross-Origin Resource Sharing (CORS) support to allow cross-domain AJAX requests to the application.


== Security settings

The `security` section of the `{file-app-yml}` file contains additional configuration for Spring Security. Please see the Spring Security documentation for details.

.Example
[source,yaml]
----
security:
    basic:
        enabled: false
----

`security.basic.enabled`::
_boolean_ -- Enables basic HTTP username and password authentication. Disabled by default in the form-based login security example.


== Hibernate settings

The `hibernate` section of the `{file-app-yml}` file contains the configuration for the Hibernate data access layer.

.Example
[source,yaml]
----
hibernate:
    cache:
        queries: false
        use_second_level_cache: false
        use_query_cache: false
----


== Quartz settings

The `quartz` section of the `{file-app-yml}` file contains the configuration for the Quartz job scheduler.

.Example
[source,yaml]
----
quartz:
    autoStartup: false
    jdbcStore: false
----


== Data Sources settings

The `dataSource` section of the `{file-app-yml}` file contains the connection configuration for the application database.

Please see <<database-setup>> for additional details.

.Example
[source,yaml]
----
dataSource:
    dbCreate: none
    url: jdbc:postgresql://localhost:5432/owf
    driverClassName: org.postgresql.Driver
    username: owf
    password: owf

    properties:
        jmxEnabled: true
        initialSize: 5
        maxActive: 50
        minIdle: 5
        maxIdle: 25
        maxWait: 10000
        maxAge: 600000
        timeBetweenEvictionRunsMillis: 5000
        minEvictableIdleTimeMillis: 60000
        validationQuery: SELECT 1
        validationQueryTimeout: 3
        validationInterval: 15000
        testOnBorrow: true
        testWhileIdle: true
        testOnReturn: false
        jdbcInterceptors: ConnectionState
        defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED
----


== Server settings

The `server` section of the `{file-app-yml}` file contains the configuration for the web server, such as port, context path, and SSL settings.

In the provided example `{file-app-yml}` file, the `server` section may be found under the top-level `environments` section.

NOTE: Some of these settings may be handled by the host web server or application container. Please see the web server documentation for details.

.Example
[source,yaml]
----
server:
    port: 8443
    contextPath: "/owf"
    ssl:
        enabled: true
        protocol: "TLS"
        client-auth: "want"
        key-store: "./certs/keystore.jks"
        key-store-password: "changeit"
        trust-store: "./certs/keystore.jks"
        trust-store-password: "changeit"
----


== OWF settings

The `owf` section of the `{file-app-yml}` file contains the settings specific to the OWF application.


=== Help settings

When a user clicks the question mark button in the toolbar, OWF offers online help:

Out of the bundle, the Help window contains:

* Instructions for Configuring Help
* Keyboard Navigation Shortcuts

==== Changing the location of help files

The help directory location is defined by the `owf.external.helpPath` property in `{file-app-yml}`.

By default, help files are located on the classpath in the `/ozone/framework/help/` directory. In the default Tomcat bundle, this may be found at `{path-ozone}/help/`.

To change the directory location, replace `classpath:ozone/framework/help` with a location in one of the following supported formats, then restart the server:

*Formats:*

* `classpath:ozone/framework/help` -- An absolute path to a directory on the file system.
* `file:/ozone/framework/help` -- A relative path to a directory in the classpath root (for example, `/tomcat/lib/`)
* `ozone/framework/help` -- A path of a resource directory within the OWF WAR file

.Example
[source,yaml]
----
owf:
    external:
        helpPath: "classpath:ozone/framework/help"
----

==== Custom Help file types

Only files in the `helpPath` directory with specific file extensions will appear in the user interface. By default, files with the following file extensions will appear: `HTM`, `HTML`, `GSP`, `JSP`, `PDF`, `DOC`, `DOCX`, `MOV`, `MP4`, and `WMV`.

To modify the file types that will appear in the Help window, change the `owf.helpFileRegex` property (in regular expression format) in the `{file-app-yml}` file. The administrator must restart the server after the value is updated.

.Example
[source,yaml]
----
owf:
    helpFileRegex: '^.*\.(htm|html|gsp|jsp|pdf|doc|docx|mov|mp4|wmv)$'
----


=== Notification settings

WARNING: The Notification feature is no longer maintained. The steps below are for reference purposes only.

The OWF Notifications system connects an OWF and Store to an XMPP server through which it can receive information about Widgets. This feature was originally designed to be used by administrators to monitor the change logs of Store listings, but may be used to allow any Widgets to communicate with OWF users. Widgets that connect to this XMPP server can use it to publish notification messages for consumption by OWF users. Messages published to the chat room must follow a specific format that designates both the message content and the OWF usernames of the intended recipient users. The OWF server will then receive the messages from the chat room and distribute them to individual users.

To configure OWF to use notifications, follow these steps:

* Create a chat room on an XMPP server that serves as a repository for alerts to/from OWF and the Store, respectively.
* Create user accounts on the XMPP server for the Store and OWF servers.
* Use the XMPP server information to populate the XMPP Settings in the `notifications` section of `{file-app-yml}` defined below:

NOTE: Use the user accounts and their passwords from step two as the Username and Password fields on the Notifications configurations in OWF and the Store.

.Example: Notification settings
[source,yaml]
----
notifications:
    enabled: false
    query.interval: 30

    xmpp:
        username: ''
        password: ''
        host: ''
        room: ''
        port: 5222
----

`notifications.enabled`::
_boolean_ -- Turn on or turn off notifications.

`notifications.query.interval`::
_number_ -- How often OWF fetches new notifications.

`notifications.xmpp.username`::
_string_ -- The domain name for the XMPP server that administers notifications.

`notifications.xmpp.password`::
_string_ -- The domain password for the XMPP server that administers notifications.

`notifications.xmpp.host`::
_string_ -- The hostname of the XMPP server.

`notifications.xmpp.room`::
_string_ -- The XMPP chat room that receives notifications.

`notifications.xmpp.port`::
_number_ -- The TCP port the XMPP server uses.


=== Custom Data Guard and Widget Security

WARNING: The Data Guard feature is no longer maintained. The steps below are for reference purposes only.

OWF 7.1 enhanced widget security with a data guard system that addresses widget security in the following ways:

* Restricts messages between widgets based on their access levels. Disabled by default; to activate the feature, set `restrictMessages` to `true`.

* Audits all messages between widgets. To enable this feature, ensure that `restrictMessages` is set to `true`, then set the `auditAllMessages` to `true`.

* Restricts widgets ability to send messages until their access level is specified. To enable this feature, ensure that `restrictMessages` is set to `true`, then change `allowMessagesWithoutAccessLevel` to `false`.

* Specifies the amount of time the system allows to cache a widget's access level. To modify the duration, ensure that `restrictMessages` is set to `true` and quantify the `accessLevelCacheTimeout` in milliseconds.

To change this format, update the respective properties in `{file-app-yml}`:

.Example: Data Guard settings
[source,yaml]
----
dataguard:
  # Option to restrict messages between widgets based on access levels.
  # If this option is set to false, all other dataguard options are ignored.
  restrictMessages: false

  # Option to audit all messages between widgets, not just failed messages.
  # restrictMessages must be set to true
  auditAllMessages: false

  # Option to allow widgets to send messages without specifying their access level.
  # restrictMessages must be set to true
  allowMessagesWithoutAccessLevel: true

  # The amount of time (in milliseconds) to cache a widget's access level.
  # restrictMessages must be set to true
  accessLevelCacheTimeout: 3600000
----


=== Store Synchronization settings

The synchronization feature allows the Store to automatically send Widgets and their subsequent updates to OWF. Synchronization is also necessary to push OWF applications to the Store. To use this feature, developers must do the following:

* Configure application.yml to accept synchronization messages from the Store.
* Configure security.xml for both OWF and the Store. (see below)
* Synchronize the OWF server with the Store through the Store's Administration Configuration pages.

To implement the synchronization feature with the OWF sample security plugin, configure the following security.xml files for OWF and the Store:

OWF – /tomcat/lib/ozone/framework/security/security.xml:

. Add the following to the top-level <beans> element: +
`<sec:http pattern="/marketplace/sync/" security="none" />`

Store – /tomcat/lib/ozone/marketplace/security/security.xml:

. Add the following to the top-level <beans> element: +
`<sec:http pattern="/public/descriptor/" security="none" />`

The Store will only synchronize with OWF servers linked to that Store. The Store will not synchronize with unspecified OWF systems or offline OWF systems. Synchronize OWF servers with the Store through the Store Administration Configuration pages. For more information, see the *OZONE Store Administrator's Guide*.


==== Automatically add the Store listings and updates

The Marketplace Synchronization feature allows OWF administrators to automatically receive Widgets and their updates from the Store.

The synchronization feature is disabled by default. When enabled, OWF compatible listings are directly added from the Store to the Widget Manager in OWF.

To enable this feature, edit the following property values in application.yml as indicated in the table.

`mpSync.autoCreateWidget`::
_boolean_ -- Whether new Store listings are automatically added to OWF.

`mpSync.enabled`::
_boolean_ -- Whether OWF will process listing requests from the Store. Set this to `true` to receive listings and updates from the Store.

NOTE: Updates from the Store will overwrite any changes made to the corresponding widgets in OWF.

When `mpSync.autoCreateWidget` is `true`, OWF automatically adds Widgets to the Widget Manager that have the following listing criteria in the Store:

* Type is `App Component`
* Listing status is `Approved`
* Listing is `Enabled`
* A State that has "Is Published" set to `true`

Initially, the added Widgets are not associated with users or groups. However, users or administrators can see and add them from the Store. Administrators will not automatically receive all OWF compatible Widgets when they sign into OWF. Only new and updated Store listings that meet the criteria described above will automatically appear in the Widget Manager after enabling the this feature.


==== Enabling Auto-Updates from the Store

Using synchronization, users and administrators can automatically receive updates for Widgets previously added to OWF through the Store. Store updates will overwrite changes made to the corresponding Widget in OWF. For example, if an administrator adds an Intent to the Widget, the update from the Store will remove this data. To allow Store synchronization in OWF, set the mpSync.enabled property to true in the application.yml file.

To disable the synchronization between the Store listings and their OWF counterpart Widgets, set the mpSync.enabled property to false; by default, this property is set to false. Alternatively, disable the listing in the Store or remove the OWF connection from the Store.

If a developer chooses not to enable the automatic Widget synchronization, updating a Widget will require the user to delete their existing version of the widget and add the updated Widget from the Store Widget in their OWF.


==== Widget Load Times

Because the speed with which Widgets launch and operate is related to an individual system's resources, OWF has implemented ways to track the time between a Widget's rendering and the time it is actually ready to be used. The following values can be active at the same time:

.Example: Widget load times settings
[source,yaml]
----
owf:
    sendWidgetLoadTimeToServer: true
    publishWidgetLoadTimes: true
----

`owf.sendWidgetLoadTimeToServer`::
_boolean_ -- Enable or disable sending Widget load time data to a system log file where it is written and stored.

`owf.publishWidgetLoadTimes`::
_boolean_ -- Enable or disable sending the data to the Widget Log Widget, which may be opened after it is assigned to a user's instance of OWF.


=== Custom Access Alert settings

Depending on the individual security requirements where OWF is being deployed, users may be required to agree to the specific terms of a security warning. Deploying a security warning is accomplished via a custom access alert.

The default OWF bundle configuration contains example consent notice and user agreements with placeholder text, which may be customized in the `owf` section of the `{file-app-yml}` file.

.Example: Access Alert (Consent Notice) settings
[source,yaml]
----
owf:
    consent:
        enabled: true
        title: "DoD Privacy and Consent Notice"
        nextUrl: "/login"
        details:
            enabled: true
            linkText: "See User Agreement for details."
        message: |-
            You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use
            only. By using this IS (which includes any device attached to this IS), you consent to the following conditions:

            * The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to,
            penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement
            (LE), and counterintelligence (CI) investigations.
            ...
----

`owf.consent.enabled`::
_boolean_ -- Enable or disable the display of a custom consent or warning dialog to the user before they are allowed to access OWF.

`owf.consent.title`::
_string_ -- The title text to display on the custom consent or warning banner dialog.

`owf.consent.nextUrl`::
_string_ -- The URL to redirect the user to when they click the Accept button on the dialog.

`owf.consent.details.enabled`::
_boolean_ -- Whether a link should be displayed to another dialog for additional details (for example, a user agreement).

`owf.consent.details.linkText`::
_string_ -- The text to display as the link to the details dialog.

`owf.consent.message`::
_string_ -- The full message to display in the consent or warning dialog. May be formatted using standard Markdown syntax, and the indentation on the left will be removed.


.Example: Access Alert details (User Agreement) settings
[source,yaml]
----
owf:
    agreement:
        title: "User Agreement"
        message: |-
            __STANDARD MANDATORY NOTICE AND CONSENT PROVISION__

            By signing this document, you acknowledge and consent that when you access Department of Defense (DoD) information
            systems:

            You are accessing a U.S. Government (USG) information system (IS) (which includes any device attached to this
            information system) that is provided for U.S. Government authorized use only. You consent to the following
            conditions:

            * The U.S. Government routinely intercepts and monitors communications on this information system for purposes
            ...
----

`owf.agreement.title`::
_string_ -- The title text to display on the additional details (e.g. user agreement) dialog.

`owf.agreement.message`::
_string_ -- The full message to display in the additional details. May be formatted using standard Markdown syntax, and the indentation on the left will be removed.


=== Logout settings

OWF allows users to sign out of OWF in accordance with their instance's security plugins. Any modifications made to the URL will take effect when the system is restarted.

.Example: Logout settings
[source,yaml]
----
owf:
    logout:
        enabled: true
        url: "/login?out=1"
----


`owf.logout.enabled`::
_boolean_ -- Enable or disable logging out of OWF using the User menu. (Value is case sensitive; must be true or false)

`owf.logout.url`::
_string_ -- The URL to redirect the user to when they log out.

NOTE: The security plugin being used must be customized so that the value entered above will work as expected.


=== Auto Save settings

The OWF user interface will automatically save the user's dashboard at a configurable time interval. The default is to save every 15 minutes. Any modifications to the default save interval will take effect when the application.yml is saved and the system is restarted.

.Example: Auto Save settings
[source,yaml]
----
owf:
    autoSaveInterval: 900000  # 15 minutes
----

`owf.autoSaveInterval`::
_number_ -- The interval for saving the user's dashboard, in milliseconds.

NOTE: The Auto Save feature will keep the user session alive as long as a dashboard is visible in the browser.
