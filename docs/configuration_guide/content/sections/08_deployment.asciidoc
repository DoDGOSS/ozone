= Deployment

== Operating OWF From Different/Multiple Ports

Initial OWF configuration is set up so that Tomcat can be run from a local installation. Throughout this document, `servername:port` implies a `localhost:8080` or `localhost:8443` location. The example below shows how to set up OWF so that it can be used on 5050/5443.

To enable ports other than 8080/8443, the desired ports need to be explicitly edited in the Web server configuration file: `/tomcat/conf/server.xml`.

NOTE: In the event that OWF is running on a server where a port number is already in use, OWF must run from a different port number. Two applications cannot bind to the same port.

. For example, in Tomcat, change the port numbers in `/tomcat/conf/server.xml`, as shown below to the following port number: +
+
.Example: server.xml
[source,xml]
----
<Connector port="5050"
           protocol="HTTP/1.1"
           connectionTimeout="20000"
           redirectPort="5443" />

<Connector port="5443"
           protocol="HTTP/1.1"
           SSLEnabled="true"
           maxThreads="150"
           scheme="https"
           secure="true"
           keystoreFile="certs/keystore.jks"
           keystorePass="changeit"
           clientAuth="false"
           sslProtocol="TLS" />
----

.. Ports 5050 and 5443 are just examples and can be changed to whatever is needed. If OWF was running on a server where a port number was already in use, the shutdown port must also be changed. To do this, change the port number in the Tomcat Web server configuration file `/tomcat/conf/server.xml` to another port, in the following example the default shutdown port was changed from 8005 to 8006: +
+
.Example: server.xml
[source,xml]
----
<Server port="8006" shutdown="SHUTDOWN">
----

. Restart the OWF server.


== Adding the Store To OWF

The flexible and scalable nature of OWF allow for applications used in concert (such as the Store) to be included in Ozone's deployment. This allows a user to develop with the products working together, without having to activate multiple ports via configuration.

To include the Store in the Ozone bundle, do the following:

. Unpack the zipped bundles containing the applications to be included.
. Navigate to `/tomcat/webapps/` in each unpacked bundle.
. Copy the appropriate WAR files into the /tomcat/webapps/ directory where Ozone was deployed.
. Copy the additional applications' configuration files into /tomcat/lib/ where Ozone was deployed. For the Store, the configuration file is application.yml.
. Restart the Ozone server.


== Server Certificate Creation and Installation

Valid server certificates are needed for configuring the server to allow HTTPS authentication.

NOTE: Self-signed certificates will produce warnings in a user's browser. This is because a self-signed certificate, not signed by a recognized certificate authority, has no one authorizing its validity. In a production environment, certificates should be signed by a recognized certificate authority, such as an organization's internal certificate authority.

=== Generating a New Self-Signed Server Certificate

A new self-signed certificate can be generated by navigating to the tools directory and executing `create-certificates.bat` or `.sh`, depending on the operating system in use.

Follow the on-screen prompts and create the necessary certificates for the installation.

Make sure to enter the FULLY QUALIFIED server name. This needs to match the domain name of the machine exactly or the certificate will not work correctly.

If using an IP address as the Common Name (CN), an entry must be added to the Subject Alternative Name entry in the certificate. The better alternative to using an IP address is to add a name/IP pair to the hosts file and register the name as the CN.

=== Configuring Ozone For a Different Truststore/Keystore

. For server-to-server calls (Ozone-to-CAS communications, for example) the newly created self-signed certificate should be imported into the truststore. If the truststore is a separate file from the keystore, the certificate can be copied from the keystore to the truststore as follows:

.. Export the certificate from the keystore into a file: +
+
----
keytool -export -file servername.crt -keystore servername.jks -alias servername
----

.. Import the file into the Truststore: +
+
----
keytool -import -alias servername â€“keystore mytruststore.jks -file servername.crt
----

. Modify the JVM Parameters that are used to start the web application server in order to use the new truststore shown above. If a Tomcat server is being used, the parameters can be found in the setenv.bat (or .sh, depending on the operating system in use) script found within the /tomcat/bin/ folder inside of the unpacked owf-bundle-8.0.0.0.zip. If an application server other than Tomcat is being used, the parameters will need to be added to the JVM parameters which are loaded when the application server is started. +
+
.Custom JVM Parameters
[cols="m,m,"]
|===
| Parameter | Default Value | Note

| javax.net.ssl.keyStore
| "%CATALINA_HOME%/certs/keystore.jks"
| Replace `certs/keystore.jks` with the path and filename to the keystore.

| javax.net.ssl.trustStore
| "%CATALINA_HOME%/certs/keystore.jks"
| Replace `certs/keystore.jks` with the path of the truststore (may be the same as the keystore).

| javax.net.ssl.keyStorePassword
| changeit
| Replace `changeit` with the keystore's password (if applicable)

| javax.net.ssl.trustStorePassword=
| changeit
| Replace `changeit` with the truststore's password.
|===

. Finally, the server configuration must be modified to use the new KeyStore/Truststore in SSL. Below is the
relevant section from the Tomcat configuration script found in `/tomcat/conf/server.xml`: +
+
.Example: server.xml
[source,xml]
----
<Connector port="8443"
           protocol="HTTP/1.1"
           SSLEnabled="true"
           maxThreads="150"
           scheme="https"
           secure="true"
           keystoreFile="certs/keystore.jks"
           keystorePass="changeit"
           truststoreFile="certs/truststore.jks"
           truststorePass="changeit"
           clientAuth="want"
           sslProtocol="TLS" />
----

