include::../_variables.asciidoc[]
ifndef::imagesdir[]
:imagesdir: ../images/
endif::[]

== The Ozone Bundle

OWF is normally distributed as a zipped bundle. This bundle contains the main component needed to deploy and run the framework.

=== Prerequisites

==== Python

Running the OWF bundle requires that Python be installed on the host machine.

OWF has been developed and fully tested using Python 3.7.4. Versions prior to or later than Python 3.7.4 are not currently supported.

==== Docker (optional)

The bundle will include a Dockerfile that can be used to launch OWF in a container. 

=== Instructions

==== Overview

NOTE: The following is a summary. Please refer to the sections below for extended details.

. Unzip the zipped OWF bundle.
. From a command-line, start the bundle +
  `{bundle-start-script}` +
. In a supported browser, navigate to: http://localhost:8000/
. Authenticate access to OWF by entering username `admin` and password `password`

==== Starting OWF

Scripts to start the server are included in the bundle in the root directory.

The initial data is inserted into the database by the start script.

By default OWF runs using in-memory database. If an external database is desired, follow the OWF Configuration Guide for instructions on configuring.


==== Accessing OWF

After the application has finished the initialization process, OWF can be accessed by opening a web browser and navigating to the following URL:

* http://localhost:8000/


=== Authenticating to OWF

In the default installation, the user may authenticate by using the default login form using a username and password.

==== Using the login form

To login as the default administrator, use the following credentials at the login form:

* username: `admin`
* password: `password`

To login as a default unprivileged user, use the following credentials at the login form:

* username: `user`
* password: `password`


==== Certificate authentication

If the system is configured for certificate-based (X509/PKI) authentication, sample user certificates are provided and must be installed in the user's browser.  These certificates can be found under the config/ssl_auth/samples directory where the OWF bundle was deployed. See screenshots on the pages that follow for general instructions on importing certificates.

NOTE: The password for the user certificate is `password`.


===== Installing a user certificate using Internet Explorer (IE)

. Navigate to Tools → Internet Options → Content → Certificates → Personal.
. Click the Import button and navigate to the /tomcat/certs directory where the OWF bundle was deployed.
. Select the testUser1 certificate and click OK.
. Click Next and enter `password` as the password when prompted.
. Select a folder to house the certificate.
. Click Finish.
. A dialog box should display, stating that the import was successful.

NOTE: #1 -- In certain versions of Internet Explorer, certificate/connection failures are shown, despite a successful import of the testUser1 certificate. If this is the case, follow the directions above and select the X.509 from the drop-down and import the certificate titled ca.crt. +
 +
#2 -- The default dialog filter for a particular browser may be set for CER or CRT files. If this is the case, the drop-down for file type must be set for .p12. Once .p12, is selected, the certificate will show up as being available for importing. +
 +
#3 -- Some Intranets may require additional customization.

.Internet Explorer user certificate dialog
image::certificate_ie.png[]


===== Installing a user certificate using Firefox

. Navigate to Tools → Options → Advanced → Encryption → View Certificate → Your Certificates. +
_(Newer versions:  → Options → Advanced → Certificates → View Certificates → Your Certificates.)_

. Click the import button and navigate to the /tomcat/certs directory where the OWF bundle was deployed.
. Select the testUser1 certificate, click OK.
. Enter `password` as the password when prompted.
. Click Finish.
. A dialog box should display, stating that the import was successful.

.Firefox user certificate dialog
image::certificate_firefox.png[]

