ifndef::imagesdir[]
:imagesdir: ../images/
endif::[]

== Development Build Process

OWF v8.0.0.0 introduced server-side rendering for the pages requested by the client(browser). This is to create a more configurable environment for the OWF application. Due to the nature of server-side rendering, both the server and the client projects will need to be built.

In order to integrate the client bundler(webpack) with the server-side rendering of the OWF pages, a bundle metadata file, `/ozone-framework-client/packages/application/webpack-stats.json`, is now generated by the client project and consumed by the OWF backend. This metadata file keeps track of the files generated by the webpack bundler, because webpack generates a different hash in the filename every build.

When the OWF server is started using the base settings, it will automatically look in the `/ozone-framework-client/packages/application/` directory for the metadata file. However, when running the server with the production settings, the metadata file will need to exist in `/ozone-framework-python-server/config/` directory.

=== Additional requirements

* NodeJs
* Python
* Cloned ozone GitHub repository
* Docker (optional)

=== Frontend Setup

.Start using Node.js and npm
----
# install dependencies
ozone/ozone-framework-client/packages/application$ npm install

# build the client project bundle once
ozone/ozone-framework-client/packages/application$ npm run build
# or if the webpack hot-reload feature is desired, to see runtime changes to the frontend
ozone/ozone-framework-client/packages/application$ npm run start

# copy the static files(icon images and etc.) to the build directory 
ozone/ozone-framework-client/packages/application$ npm run copy-required-public

----


=== Example Widgets Setup

.Start using Node.js and npm
----
# from the /ozone-example-widgets directory

# install dependencies
ozone/ozone-example-widgets$ npm install

# build the client project bundle
ozone/ozone-example-widgets$ npm run build
# or if the OWF application expects the widgets to be hosted on a standalone server running on localhost:4000
ozone/ozone-example-widgets$ npm run start

# copy the pre-bundled client widget api to the build directory
ozone/ozone-example-widgets$ npm run copy-owf-js
----


=== Backend Setup

.Start using start script
----
# from the /ozone-framework-python-server directory

# it is recommended that you create a virtual python environment to avoid poluting the global packages environment
# this can be achieved using the pipenv package
ozone/ozone-framework-python-server$ pip install pipenv
# create virtual env
ozone/ozone-framework-python-server$ pipenv shell

# install dependencies
ozone/ozone-framework-python-server$ pip install -r requirements.txt

# run migrations to create the database schema, if needed
ozone/ozone-framework-python-server$ python manage.py makemigrations

# run the start script, which will assure that the database schema is up-to-date and load the default data.
ozone/ozone-framework-python-server$ ./start-dev.sh

----


=== Starting OWF via Docker

.Start single app bundle
----
// From the project's root directory
ozone$ docker-compose up
----


==== Accessing OWF

Once all of the projects finish the initialization process, OWF can be accessed by opening a web browser and navigating to the following URL:

* http://localhost:8000/
