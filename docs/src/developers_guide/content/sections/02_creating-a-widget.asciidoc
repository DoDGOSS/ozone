include::../_variables.asciidoc[]
include::../../../configuration_guide/content/_variables.asciidoc[]

[#creating-a-widget]
= Creating a Widget

== Overview

OWF widgets are lightweight Web applications wrapped with a metadata definition that provide a description to the framework of how the widget should load. The widget metadata definition contains a number of fields including a _URL_, _Default Name_, _Default Height_ and _Default Width_.

OWF provides a suite of APIs that enable the developer to extend their Web application through the use of inter-widget communication, user preferences and internationalization. Each API is written in JavaScript so that widgets can be built in a large variety of Web technologies.

Three key factors to keep in mind when creating a Widget are:

* OWF supports and encourages a decentralized deployment model. Widgets are not required to be deployed on the same server as OWF and can be distributed throughout the enterprise.

* OWF is Web-technology agnostic. Widgets can be written in the JavaScript capable technology of the developer’s choice. OWF enabled applications have been built in varied technologies such as JavaScript (React, Dojo), Java (JSPs, GWT, JSF, Groovy, Grails), .NET (ASP.NET, C# .NET), Scripting Languages (PHP, Perl, Ruby on Rails), and Rich UI Frameworks/Plugins (Flex, Silverlight, Google Earth Plugin, Java Applets).

* The location that hosts Widget descriptor files must have Cross-Origin Resource Sharing (CORS) enabled. Usually, the Web app used to create the Widget also serves as the host for the descriptor file. The method used to configure CORS support will vary based on the type of Web app platform used. For backwards compatibility, the format of the descriptor file itself is unchanged. The template is located in etc/widget/descriptor within the OWF bundle.

This document assumes that the reader has a development background and is familiar with their chosen technology stack. The tutorials found throughout this document will focus on building a simple HTML/JavaScript Web application deployed to a Java Application Server.


== Tutorial

*Step 1 - Create the Announcing Clock widget*

NOTE: The complete example files are available for this tutorial under the `{path-full}/{path-examples}/` directory.

Create the following files in the `{path-full}/{path-server-public}/` directory:

[source,html]
.AnnouncingClock.html
----
include::{relpath-examples}/AnnouncingClock.html[]
----

[source,javascript]
.AnnouncingClock.js
----
include::{relpath-examples}/AnnouncingClock.js[]
----


*Step 2 - Start the web server*

The examples in this guide use a simple web server using Node.js (https://nodejs.org/) and Express (https://expressjs.com/).

Using the command line, navigate to the `{path-server}/` directory and run the following commands:

  npm install
  npm start

Next, navigate to `{url-server}/AnnouncingClock.html` to view the new Announcing Clock widget.

== Additional Considerations

=== Utility JS API

The JavaScript Utility API is provided to allow the developer to determine whether or not the widget is running inside OWF. This is useful if the widget needs to render differently or has different defaults depending on whether or not it is running internal or external to OWF. For instance, if a widget is supposed to turn on logging when running inside OWF, the developer can use the JavaScript Utility API to determine this.

NOTE: In some previous versions of OWF, a widget launched outside of OWF would spawn an error in an alert window. Now, widget can be launched and used outside OWF. And while certain features, both specific and critical to OWF, such as the launch of security alert windows, preferences and eventing will not operate outside OWF, the error alert window will not launch, provided the widget URL is NOT appended with `owf=true`. Moreover, APIs can often throw exceptions which can make a widget fail to load.

While originally defined in `js/util/widget_utils.js` (depreciated), the interface object now resides within the Ozone.util namespace. The entire namespace has been included in the OWF Widget JS bundles (both debug and min) for convenience.

.Utility API Namespaces
[cols="1m,4"]
|===
| Namespace | Summary

| OWF.Util
| A namespace containing common utility functions to assist widget developers.
|===

.Utility API Methods
[cols="1m,2"]
|===
| Method | Summary

| <static> OWF.Util.cloneDashboard()
| Clones dashboard and returns a dashboard cfg object that can be used to create new dashboards.

| <static> OWF.Util.guid()
| Returns a globally unique identifier (GUID).

| <static> OWF.Util.isInContainer()
| This method informs a widget developer if their widget is running in a Container, such as OWF.

| <static> OWF.Util.isRunningInOWF()
| This method informs a widget developer if their widget is running from OWF or from a direct URL call.
|===


=== Best Practices

Due to the complexity of the OWF APIs, a widget’s ability to signal that it is ready to communicate with other widgets provides a helpful tool for developers. This ready signal is typically sent after the Web app has subscribed to channels, registered RPC functions and Intents, etc. Starting with OWF 6, there is a standard way for widgets to signal this ready status.

To signal that it is ready, a widget calls `OWF.notifyWidgetReady()` after it is finished setting up any communication mechanisms. The OWF Development Team recommends that any widget that uses OWF APIs makes the call. However, widgets that use the Widget Intents API’s receive method must make this call.


=== OWF Bundled JavaScript

// TODO - Minify this widget-js file and replace with proper
All required OWF JavaScript is bundled into one JavaScript file, found in the bundle directory (`{app-bundle}/{staticfiles-widget-js}`). This file is generally minified (`owf-widget.min.js`), however, the full file is included for demonstration purposes. This shields developers from future changes or upgrades to the underlying JavaScript files.

There are multiple ways that developers can reference the `owf-widget.min.js` file from their widgets. One way is to hard-code a link to the file residing on a specific OWF. This has the disadvantage of tying the widget to a particular OWF instance. Another option is to include a copy of `owf-widget.min.js` with the widget itself, and to use a relative URL to reference it. This makes the widget independent of any particular OWF instance, but ties the widget to a specific version of the `owf-widget.min.js` file. If there is a version mismatch between this file and the OWF version where the widget is run, then problems could arise.

The recommended way to include the `owf-widget.min.js` file into a widget is to create the script reference dynamically so that it always refers to the copy of owf-widget.min.js on the OWF server where the widget is currently running. The dynamic reference can be generated either server-side or client-side. To generate it server-side, use the "Referer" [sic] HTTP header, which will contain the URL of the main OWF page when the widget is launched. To retrieve the URL of the OWF instance for the widget's client-side code, use the following JavaScript:

[source,javascript]
----
JSON.parse(window.name).preferenceLocation.split('/prefs')[0];
----
